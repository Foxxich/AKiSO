#include <sys/wait.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <termios.h>

/*
  Function Declarations for builtin shell commands:
 */
int lsh_cd(char **args);
int lsh_help(char **args);
int lsh_exit(char **args);
void killProcess();

pid_t backgroundProcesses [100];
int indexPid = 0;

pid_t shell_pgid;
struct termios shell_tmodes;
int shell_terminal;
int shell_is_interactive;


/*
  List of builtin commands, followed by their corresponding functions.
 */
char *builtin_str[] = {
  "cd",
  "help",
  "exit"
};

int (*builtin_func[]) (char **) = {
  &lsh_cd,
  &lsh_help,
  &lsh_exit
};

int lsh_num_builtins() {
  return sizeof(builtin_str) / sizeof(char *);
}

/*
  Builtin function implementations.
*/

/**
   @brief Bultin command: change directory.
   @param args List of args.  args[0] is "cd".  args[1] is the directory.
   @return Always returns 1, to continue executing.
 */
int lsh_cd(char **args)
{
  char * apostrophe = NULL;
  if (args[1] == NULL) { 
    chdir("/home");
  } else {
    printf("Args - %s \n", args[1]);
    while(apostrophe = strchr(args[1], '"'))
    {
      *apostrophe = ' ';
    }
  
    if (chdir("/home/foxxik/Telegram Desktop") != 0) {
      printf("args - %s \n", args[1]);
      printf("%s", apostrophe);
      perror("lsh");
    }
  }
  return 1;
}

/**
   @brief Builtin command: print help.
   @param args List of args.  Not examined.
   @return Always returns 1, to continue executing.
 */
int lsh_help(char **args)
{
  int i;
  printf("Type program names and arguments, and hit enter.\n");
  printf("The following are built in:\n");

  for (int i = 0; i < lsh_num_builtins(); i++) {
    printf("  %s\n", builtin_str[i]);
  }

  printf("Use the man command for information on other programs.\n");
  return 1;
}

/**
   @brief Builtin command: exit.
   @param args List of args.  Not examined.
   @return Always returns 0, to terminate execution.
 */
int lsh_exit(char **args)
{
  killProcess();
  return 0;
}

int insertNewPid(int pid)
{
  backgroundProcesses[indexPid] = pid;
  indexPid ++;
  return 0;
  //TO DO - jesli braknie miejsca to return -1
}

void killProcess()
{
  for(int i=0;i<indexPid;i++)
  kill(backgroundProcesses[i],9);
}

/**
  @brief Launch a program and wait for it to terminate.
  @param args Null terminated list of arguments (including program).
  @return Always returns 1, to continue execution.
 */
int lsh_launch(char **args, int processType)
{
  pid_t pid, wpid;
  int status;
  // printf("%d        | \n",processType);
  pid = fork();
  // printf("%d", pid);
  // printf("%s",&args);
  if(processType == 0) {
    // printf("!&");
    if (pid == 0) 
    {
      // Child process
      if (execvp(args[0], args) == -1) {
        perror("lsh");
      }
      exit(EXIT_FAILURE);
    } else if (pid < 0) {
      // Error forking
      perror("lsh");
    } else 
    {
      // Parent process
      do {
        wpid = waitpid(pid, &status, WUNTRACED);
      } while (!WIFEXITED(status) && !WIFSIGNALED(status));
    }
  } else
  {
    // printf("&");
    if (pid == 0) 
    {
      // Child process
      if (execvp(args[0], args) == -1) {
        perror("lsh");
      }
      exit(EXIT_FAILURE);
    } else if (pid < 0) {
      // Error forking
      perror("lsh");
    } else 
    {
      insertNewPid(pid);
      // printf("%d", pid);
      // wpid = waitpid(pid, &status, WUNTRACED);
      
    }
  }

  return 1;
}

/**
   @brief Execute shell built-in or launch program.
   @param args Null terminated list of arguments.
   @return 1 if the shell should continue running, 0 if it should terminate
 */
int lsh_execute(char **args, int processType)
{
  int i;
  if (args[0] == NULL) {
    // An empty command was entered.
    return 1;
  }

  for (i = 0; i < lsh_num_builtins(); i++) {
    if (strcmp(args[0], builtin_str[i]) == 0) {
      return (*builtin_func[i])(args);
    }
  }

  return lsh_launch(args,processType);
}

#define LSH_RL_BUFSIZE 1024
/**
   @brief Read a line of input from stdin.
   @return The line from stdin.
 */
char *lsh_read_line(void)
{
  int bufsize = LSH_RL_BUFSIZE;
  int position = 0;
  char *buffer = malloc(sizeof(char) * bufsize);
  int c;

  if (!buffer) {
    fprintf(stderr, "lsh: allocation error\n");
    exit(EXIT_FAILURE);
  }

  while (1) {
    // Read a character
    c = getchar();

    if (c == '\n') {
      buffer[position] = '\0';
      return buffer;
    } 
    // Manage CTRL+D
    if(c == EOF) {
      killProcess();
      exit(EXIT_FAILURE);
    } else {
      buffer[position] = c;
    }
    position++;

    // If we have exceeded the buffer, reallocate.
    if (position >= bufsize) {
      bufsize += LSH_RL_BUFSIZE;
      buffer = realloc(buffer, bufsize);
      if (!buffer) {
        fprintf(stderr, "lsh: allocation error\n");
        exit(EXIT_FAILURE);
      }
    }
  }
}

#define LSH_TOK_BUFSIZE 64
#define LSH_TOK_DELIM " \t\r\n\a"
/**
   @brief Split a line into tokens (very naively).
   @param line The line.
   @return Null-terminated array of tokens.
 */
char **lsh_split_line(char *line)
{
  //TODO : jesli sa apostrofy, to nalezy wczytywac spacje 
  int bufsize = LSH_TOK_BUFSIZE, position = 0;
  char **tokens = malloc(bufsize * sizeof(char*));
  char *token;




  if (!tokens) {
    fprintf(stderr, "lsh: allocation error\n");
    exit(EXIT_FAILURE);
  }

  token = strtok(line, LSH_TOK_DELIM);
  while (token != NULL) {
    tokens[position] = token;
    position++;

    if (position >= bufsize) {
      bufsize += LSH_TOK_BUFSIZE;
      tokens = realloc(tokens, bufsize * sizeof(char*));
      if (!tokens) {
        fprintf(stderr, "lsh: allocation error\n");
        exit(EXIT_FAILURE);
      }
    }

    token = strtok(NULL, LSH_TOK_DELIM);
  }
  tokens[position] = NULL;
  return tokens;
}

/**
   @brief Loop getting input and executing it.
 */
void lsh_loop(void)
{
  char * ampersand_pos = NULL;

  int run_in_bg = 0;

  char *line;
  char **args;
  int status;

  char tab[120];
  do {
    getcwd(tab,120);
    printf("%s |> ",tab);
    line = lsh_read_line();
    // printf("%s",line);

    if(ampersand_pos = strchr(line, '&'))
    {
      // Remove ampersand from args and replace it with null byte
      *ampersand_pos = '\0';
      run_in_bg = 1;
      // printf("Success");
    }

    if(ampersand_pos = strchr(line, '&'))
    {
      // Remove ampersand from args and replace it with null byte
      *ampersand_pos = '\0';
      run_in_bg = 1;
      // printf("Success");
    }

    args = lsh_split_line(line);
    status = lsh_execute(args,run_in_bg);

    free(line);
    free(args);

    run_in_bg = 0;
  } while (status);
}

/**
   @brief Main entry point.
   @param argc Argument count.
   @param argv Argument vector.
   @return status code
 */
int main(int argc, char **argv)
{
  // Load config files, if any.

  // Run command loop.
  lsh_loop();

  // Perform any shutdown/cleanup.

  return EXIT_SUCCESS;
}

